import { useCallback } from "react";
import ReactFlow, { Background, Controls, ReactFlowProvider } from "reactflow";
import "reactflow/dist/style.css";
import { Button } from "../../../components/ui/button";
import { useAIAssistantStore } from "../../../stores/aiAssistantStore";
import IconComponent from "../../common/genericIconComponent";
import { useToast } from "../../../components/ui/use-toast";
import useAddFlow from "../../../hooks/flows/use-add-flow";
import useFlowStore from "../../../stores/flowStore";
import useFlowsManagerStore from "../../../stores/flowsManagerStore";

export default function FlowPreview() {
  const { toast } = useToast();
  const { flowNodes, flowEdges, instruction } = useAIAssistantStore();
  const addFlow = useAddFlow();
  const setNodes = useFlowStore((state) => state.setNodes);
  const setEdges = useFlowStore((state) => state.setEdges);
  const nodes = useFlowStore((state) => state.nodes);
  const edges = useFlowStore((state) => state.edges);
  const currentFlow = useFlowsManagerStore((state) => state.currentFlow);

  const handleImportFlow = useCallback(() => {
    if (flowNodes.length === 0) {
      toast({
        title: "No flow to import",
        description: "Please build a flow first",
        variant: "destructive",
      });
      return;
    }

    try {
      if (currentFlow) {
        // Add the nodes and edges to the current canvas
        const offsetX = 50; // Offset to avoid overlapping with existing nodes
        const offsetY = 50;

        // Find the rightmost node in the current canvas to position new nodes
        let maxX = 0;
        if (nodes.length > 0) {
          maxX = Math.max(...nodes.map(node => node.position.x)) + 300;
        }

        // Adjust positions of new nodes
        const adjustedNodes = flowNodes.map(node => ({
          ...node,
          position: {
            x: node.position.x + maxX,
            y: node.position.y + offsetY
          }
        }));

        // Generate unique IDs for the new nodes to avoid conflicts
        const nodeIdMap = {};
        const uniqueNodes = adjustedNodes.map(node => {
          const newId = `${node.id}-${Date.now()}`;
          nodeIdMap[node.id] = newId;
          return {
            ...node,
            id: newId
          };
        });

        // Update edge references to use the new node IDs
        const uniqueEdges = flowEdges.map(edge => ({
          ...edge,
          id: `${edge.id}-${Date.now()}`,
          source: nodeIdMap[edge.source],
          target: nodeIdMap[edge.target]
        }));

        // Add the new nodes and edges to the canvas
        setNodes([...nodes, ...uniqueNodes]);
        setEdges([...edges, ...uniqueEdges]);

        toast({
          title: "Flow added to canvas",
          description: "The AI generated flow has been added to your current canvas",
        });
      } else {
        // If no current flow, create a new one
        const newFlow = {
          name: `AI Generated Flow - ${new Date().toLocaleString()}`,
          description: instruction || "Generated by AI Assistant",
          data: {
            nodes: flowNodes,
            edges: flowEdges,
          },
        };

        // Add the flow to the flows manager
        addFlow(newFlow);

        toast({
          title: "Flow imported successfully",
          description: "A new flow has been created with the AI generated content",
        });
      }
    } catch (error) {
      toast({
        title: "Error importing flow",
        description: error instanceof Error ? error.message : "Unknown error",
        variant: "destructive",
      });
    }
  }, [flowNodes, flowEdges, instruction, addFlow, toast, nodes, edges, setNodes, setEdges, currentFlow]);

  return (
    <div className="flex h-full flex-col">
      <div className="flex items-center justify-between mb-2">
        <div className="text-sm text-muted-foreground">
          {flowNodes.length > 0
            ? `${flowNodes.length} nodes, ${flowEdges.length} connections`
            : "No flow data"}
        </div>

        <Button
          onClick={handleImportFlow}
          disabled={flowNodes.length === 0}
          variant="default"
          size="sm"
        >
          <IconComponent name="Import" className="mr-2 h-4 w-4" />
          Add to Canvas
        </Button>
      </div>

      <div className="flex-1 rounded-md border border-border">
        {flowNodes.length === 0 ? (
          <div className="flex h-full flex-col items-center justify-center text-center text-muted-foreground">
            <IconComponent name="FileFlow" className="mb-2 h-12 w-12" />
            <p>No flow preview available</p>
            <p className="text-sm">Build a flow from the Instruction tab</p>
          </div>
        ) : (
          <ReactFlowProvider>
            <ReactFlow
              nodes={flowNodes}
              edges={flowEdges}
              fitView
              attributionPosition="bottom-right"
              zoomOnScroll={true}
              panOnScroll={true}
              nodesDraggable={false}
              nodesConnectable={false}
              elementsSelectable={false}
              proOptions={{ hideAttribution: true }}
            >
              <Background />
              <Controls showInteractive={true} />
            </ReactFlow>
          </ReactFlowProvider>
        )}
      </div>
    </div>
  );
}
