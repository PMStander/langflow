"""fix_schema_mismatch

Revision ID: 4d4f8a88110d
Revises: 52a66cece52b
Create Date: 2025-05-23 11:23:19.793984

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.engine.reflection import Inspector
from langflow.utils import migration


# revision identifiers, used by Alembic.
revision: str = '4d4f8a88110d'
down_revision: Union[str, None] = '52a66cece52b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('client', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    # Check if the constraint exists before trying to drop it
    with op.batch_alter_table('folder', schema=None) as batch_op:
        constraints = inspector.get_unique_constraints('folder')
        constraint_names = [constraint['name'] for constraint in constraints]
        if 'unique_folder_name' in constraint_names:
            batch_op.drop_constraint('unique_folder_name', type_='unique')

    with op.batch_alter_table('invoice', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    with op.batch_alter_table('opportunity', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['id'])

    # Check if the indexes exist before trying to drop them
    with op.batch_alter_table('task', schema=None) as batch_op:
        indexes = inspector.get_indexes('task')
        index_names = [index['name'] for index in indexes]

        if 'ix_task_client_id' in index_names:
            batch_op.drop_index('ix_task_client_id')

        if 'ix_task_invoice_id' in index_names:
            batch_op.drop_index('ix_task_invoice_id')

        if 'ix_task_opportunity_id' in index_names:
            batch_op.drop_index('ix_task_opportunity_id')

        batch_op.create_unique_constraint(None, ['id'])

    # ### end Alembic commands ###


def downgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)
    # ### commands auto generated by Alembic - please adjust! ###

    # Handle task table
    with op.batch_alter_table('task', schema=None) as batch_op:
        # Check if the unique constraint exists before dropping it
        constraints = inspector.get_unique_constraints('task')
        for constraint in constraints:
            if 'id' in constraint['column_names'] and len(constraint['column_names']) == 1:
                batch_op.drop_constraint(constraint['name'], type_='unique')
                break

        # Create indexes if they don't exist
        indexes = inspector.get_indexes('task')
        index_names = [index['name'] for index in indexes]

        if 'ix_task_opportunity_id' not in index_names:
            batch_op.create_index('ix_task_opportunity_id', ['opportunity_id'], unique=False)

        if 'ix_task_invoice_id' not in index_names:
            batch_op.create_index('ix_task_invoice_id', ['invoice_id'], unique=False)

        if 'ix_task_client_id' not in index_names:
            batch_op.create_index('ix_task_client_id', ['client_id'], unique=False)

    # Handle opportunity table
    with op.batch_alter_table('opportunity', schema=None) as batch_op:
        constraints = inspector.get_unique_constraints('opportunity')
        for constraint in constraints:
            if 'id' in constraint['column_names'] and len(constraint['column_names']) == 1:
                batch_op.drop_constraint(constraint['name'], type_='unique')
                break

    # Handle invoice table
    with op.batch_alter_table('invoice', schema=None) as batch_op:
        constraints = inspector.get_unique_constraints('invoice')
        for constraint in constraints:
            if 'id' in constraint['column_names'] and len(constraint['column_names']) == 1:
                batch_op.drop_constraint(constraint['name'], type_='unique')
                break

    # Handle folder table - only create constraint if it doesn't exist
    with op.batch_alter_table('folder', schema=None) as batch_op:
        constraints = inspector.get_unique_constraints('folder')
        constraint_names = [constraint['name'] for constraint in constraints]
        if 'unique_folder_name' not in constraint_names:
            batch_op.create_unique_constraint('unique_folder_name', ['user_id', 'name'])

    # Handle client table
    with op.batch_alter_table('client', schema=None) as batch_op:
        constraints = inspector.get_unique_constraints('client')
        for constraint in constraints:
            if 'id' in constraint['column_names'] and len(constraint['column_names']) == 1:
                batch_op.drop_constraint(constraint['name'], type_='unique')
                break

    # ### end Alembic commands ###
